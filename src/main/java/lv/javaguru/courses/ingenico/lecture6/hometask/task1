example of recursive task is in RecursiveTask docs :

 class Fibonacci extends RecursiveTask<Integer> {
    final int n;

    Fibonacci(int n) { this.n = n; }

    Integer compute() {
        if (n <= 1){
            return n;
        }
    Fibonacci f1 = new Fibonacci(n - 1); -> split on subtask
    f1.fork();
    Fibonacci f2 = new Fibonacci(n - 2);

    return f2.compute() + f1.join(); -> combine results
 }

 Task :
 /****
 Don't be confused about using http resource to generate random values,
 the aim is to understand recursive task and use apache library for http communication
 ****/

write custom implementation of Recursive Task "RandomBytesGenerator"
generator should call http resource "http://httpbin.org/bytes/10" -> where 20 is number of generated bytes

You can receive maximum 20 bytes per one http call
If user wants to receive 100 bytes you should split your task on subtask

***************
Example =
RandomBytesGenerator(100)
-> splits on two subtasks RandomBytesGenerator(50) and RandomBytesGenerator(50)
-> each RandomBytesGenerator(50) splits on two subtasks RandomBytesGenerator(25) and RandomBytesGenerator(25)
-> each RandomBytesGenerator(50) splits on two subtasks RandomBytesGenerator(12) and RandomBytesGenerator(13)
-> total tasks executed : 8


***************
Http get request example :

    private String doHttpGetRequest(String uri) {
        CloseableHttpClient client = HttpClientBuilder.create().build();
        HttpGet get = new HttpGet(uri);
        try {
            return httpClient.execute(get, response -> readContent(response.getEntity()));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private String readContent(HttpEntity httpEntity) throws IOException {
        InputStream content = httpEntity.getContent();
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(content, StandardCharsets.UTF_8))) {
            StringBuilder result = new StringBuilder();
            int c;
            while ((c = reader.read()) != -1) {
                result.append((char) c);
            }
            return result.toString();
        }
    }

***************
To run task in ForkJoinPool
        ForkJoinPool forkJoinPool = ForkJoinPool.commonPool();
        byte[] result = forkJoinPool.invoke(new RandomBytesGenerator(100));

***************
You can add logging and you will see that tasks executes in different threads
[ForkJoinPool.commonPool-worker-3] -> thread name
Example :

14:54:41.004 [ForkJoinPool.commonPool-worker-3] INFO lv.javaguru.courses.ingenico.lecture6.hometask.solution.RandomBytesGenerator - get bytes : 13
14:54:41.004 [ForkJoinPool.commonPool-worker-2] INFO lv.javaguru.courses.ingenico.lecture6.hometask.solution.RandomBytesGenerator - get bytes : 13
14:54:41.004 [ForkJoinPool.commonPool-worker-1] INFO lv.javaguru.courses.ingenico.lecture6.hometask.solution.RandomBytesGenerator - get bytes : 13
14:54:41.730 [ForkJoinPool.commonPool-worker-2] INFO lv.javaguru.courses.ingenico.lecture6.hometask.solution.RandomBytesGenerator - get bytes : 12
14:54:41.731 [ForkJoinPool.commonPool-worker-1] INFO lv.javaguru.courses.ingenico.lecture6.hometask.solution.RandomBytesGenerator - get bytes : 12
14:54:41.861 [ForkJoinPool.commonPool-worker-3] INFO lv.javaguru.courses.ingenico.lecture6.hometask.solution.RandomBytesGenerator - get bytes : 12
14:54:41.861 [ForkJoinPool.commonPool-worker-2] INFO lv.javaguru.courses.ingenico.lecture6.hometask.solution.RandomBytesGenerator - get bytes : 13
14:54:41.998 [ForkJoinPool.commonPool-worker-3] INFO lv.javaguru.courses.ingenico.lecture6.hometask.solution.RandomBytesGenerator - get bytes : 12